/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME "WeeklySchedule"
// #HINT "7-day Startup/Shutdown Schedule"
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "16" // Time/Date
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
	DIGITAL_INPUT systemIsOn;
	DIGITAL_INPUT enableToggle;
	DIGITAL_INPUT minuteTick;
	DIGITAL_INPUT hourUp, hourDown, minUp, minDown;
	DIGITAL_INPUT monStartup, tueStartup, wedStartup, thuStartup, friStartup, satStartup, sunStartup;
	DIGITAL_INPUT monShutdown, tueShutdown, wedShutdown, thuShutdown, friShutdown, satShutdown, sunShutdown; 
	DIGITAL_INPUT shutdownOverride;
	STRING_INPUT date$[16];
// BUFFER_INPUT 

	DIGITAL_OUTPUT enabled;
	DIGITAL_OUTPUT afterHour;
	DIGITAL_OUTPUT forcedOnAfterHour;
	DIGITAL_OUTPUT turnOnPulse, turnOffPulse;
	DIGITAL_OUTPUT shutdownWarning;
// ANALOG_OUTPUT 	
   	STRING_OUTPUT dow$;
	ANALOG_OUTPUT startUp_Hour, startUp_Min, shutdown_Hour, shutdown_Min;
	STRING_OUTPUT monStartup$, tueStartup$, wedStartup$, thuStartup$, friStartup$, satStartup$, sunStartup$;
	STRING_OUTPUT monShutdown$, tueShutdown$, wedShutdown$, thuShutdown$, friShutdown$, satShutdown$, sunShutdown$; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
	NONVOLATILE INTEGER schEnabled;
	NONVOLATILE INTEGER startupHour[6], startupMin[6], shutdownHour[6], shutdownMin[6];
	INTEGER selected;
                        
#DEFINE_CONSTANT	pulseTime	100
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function UpdateTime(INTEGER which)
{
	switch (which)
	{
		case (0):
			// Sunday startup
			{
				MAKESTRING(sunStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (1):
			// Monday startup
			{
				MAKESTRING(monStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (2):
			// Tuesday startup
			{
				MAKESTRING(tueStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (3):
			// Wednesday startup
			{
				MAKESTRING(wedStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (4):
			// Thursday startup
			{
				MAKESTRING(thuStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (5):
			// Friday startup
			{
				MAKESTRING(friStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (6):
			// Saturday startup
			{
				MAKESTRING(satStartup$, "%02u:%02u", startupHour[which], startupMin[which]);
			}
		case (8):
			// Sunday shutdown
			{
				MAKESTRING(sunShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
		case (9):
			// Monday shutdown
			{
				MAKESTRING(monShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
		case (10):
			// Tuesday shutdown
			{
				MAKESTRING(tueShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
		case (11):
			// Wednesday shutdown
			{
				MAKESTRING(wedShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
		case (12):
			// Thursday shutdown
			{
				MAKESTRING(thuShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
		case (13):
			// Friday shutdown
			{
				MAKESTRING(friShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
		case (14):
			// Saturday shutdown
			{
				MAKESTRING(satShutdown$, "%02u:%02u", shutdownHour[which-8], shutdownMin[which-8]);
			}
	}
}
                        
FUNCTION CheckSchedule()
{
	INTEGER dow;
	INTEGER hour;
	INTEGER minutes;
	INTEGER startupMinutes, shutdownMinutes;
         
	dow = GETDAYOFWEEKNUM();
	minutes = GETHOURNUM() * 60 + GETMINUTESNUM();
	if (minutes = 240)
	{
		// shutdown system at 4AM no matter what
		PULSE(pulseTime, turnOffPulse);
		afterHour = 0;
		forcedOnAfterHour = 0;
		return;
	}
	if (enabled = 0)
		return;
	startupMinutes = startupHour[dow] * 60 + startupMin[dow];
	shutdownMinutes = shutdownHour[dow] * 60 + shutdownMin[dow];
	if (startupMinutes >= shutdownMinutes)
	{
		// schedule is disabled, don't do anything
		return;
	}
	if (minutes >= shutdownMinutes)
	{
		afterHour = 1;
		if (forcedOnAfterHour)
			return;
		if (systemIsOn != 0)
		{
			PULSE(pulseTime, turnOffPulse);
		}
		return;
	}
	if (forcedOnAfterHour = 0)
	{
		if ((shutdownMinutes - minutes) <= 5)
		{
			PULSE(pulseTime, shutdownWarning);
		}
	}
	if (minutes >= startupMinutes)
	{
		if (systemIsOn = 0)
		{
			PULSE(pulseTime, turnOnPulse);
		}
//		forcedOnAfterHour = 0;
		afterHour = 0;
		return;
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
          
PUSH systemIsOn
{
	if (enabled && afterHour && systemIsOn)
	{
		// ok, somebody forced the system on after hour
        forcedOnAfterHour = 1;
	}
}
    
PUSH shutdownOverride
{
	forcedOnAfterHour = 1;
}

RELEASE systemIsOn
{
	forcedOnAfterHour = 0;
}
 
PUSH enableToggle
{
	schEnabled = !schEnabled;
	enabled = schEnabled;
	CheckSchedule();
}

PUSH hourUp
{
	if (selected < 8)
	{
		if (startupHour[selected] < 23)
		{
			startupHour[selected] = startupHour[selected] + 1;
        	UpdateTime(selected);
		}
	}
	else
	{
		if (shutdownHour[selected-8] < 23)
		{
			shutdownHour[selected-8] = shutdownHour[selected-8] + 1;
			UpdateTime(selected);
		}
	}
	if (selected = GETDAYOFWEEKNUM())
	{
		startup_Hour = startupHour[selected];
		startup_Min = startupMin[selected];
		CheckSchedule();
	}
	else if ((selected - 8) = GETDAYOFWEEKNUM())
	{
		shutdown_Hour = shutdownHour[selected-8];
		shutdown_Min = shutdownMin[selected-8];
		CheckSchedule();
	}
}

PUSH hourDown
{
	if (selected < 8)
	{
		if (startupHour[selected] > 0)
		{
			startupHour[selected] = startupHour[selected] - 1;
        	UpdateTime(selected);
		}
	}
	else
	{
		if (shutdownHour[selected-8] > 0)
		{
			shutdownHour[selected-8] = shutdownHour[selected-8] - 1;
			UpdateTime(selected);
		}
	}
	if (selected = GETDAYOFWEEKNUM())
	{
		startup_Hour = startupHour[selected];
		startup_Min = startupMin[selected];
		CheckSchedule();
	}
	else if ((selected - 8) = GETDAYOFWEEKNUM())
	{
		shutdown_Hour = shutdownHour[selected-8];
		shutdown_Min = shutdownMin[selected-8];
		CheckSchedule();
	}
}

PUSH minUp
{
	if (selected < 8)
	{
		if (startupMin[selected] < 55)
		{
			startupMin[selected] = startupMin[selected] + 5;
        	UpdateTime(selected);
		}
	}
	else
	{
		if (shutdownMin[selected-8] < 55)
		{
			shutdownMin[selected-8] = shutdownMin[selected-8] + 5;
			UpdateTime(selected);
		}
	}
	if (selected = GETDAYOFWEEKNUM())
	{
		startup_Hour = startupHour[selected];
		startup_Min = startupMin[selected];
		CheckSchedule();
	}
	else if ((selected - 8) = GETDAYOFWEEKNUM())
	{
		shutdown_Hour = shutdownHour[selected-8];
		shutdown_Min = shutdownMin[selected-8];
		CheckSchedule();
	}
}

PUSH minDown
{
	if (selected < 8)
	{
		if (startupMin[selected] > 4)
		{
			startupMin[selected] = startupMin[selected] - 5;
        	UpdateTime(selected);
		}
	}
	else
	{
		if (shutdownMin[selected-8] > 4)
		{
			shutdownMin[selected-8] = shutdownMin[selected-8] - 5;
			UpdateTime(selected);
		}
	}
	if (selected = GETDAYOFWEEKNUM())
	{
		startup_Hour = startupHour[selected];
		startup_Min = startupMin[selected];
		CheckSchedule();
	}
	else if ((selected - 8) = GETDAYOFWEEKNUM())
	{
		shutdown_Hour = shutdownHour[selected-8];
		shutdown_Min = shutdownMin[selected-8];
		CheckSchedule();
	}
}
       
PUSH minuteTick
{
	CheckSchedule();
}

CHANGE date$
{
	INTEGER dow;

	dow$ = DAY();
	dow = GETDAYOFWEEKNUM();
	startup_Hour = startupHour[dow];
	startup_Min = startupMin[dow];
	shutdown_Hour = shutdownHour[dow];
	shutdown_Min = shutdownMin[dow];
	CheckSchedule();
}

CHANGE monStartup
{
	selected = 1;
}

CHANGE tueStartup
{
	selected = 2;
}

CHANGE wedStartup
{
	selected = 3;
} 

CHANGE thuStartup
{
	selected = 4;
}

CHANGE friStartup
{
	selected = 5;
}

CHANGE satStartup
{
	selected = 6;
}

CHANGE sunStartup
{
	selected = 0;
}

CHANGE monShutdown
{
	selected = 9;
}

CHANGE tueShutdown
{
	selected = 10;
}

CHANGE wedShutdown
{
	selected = 11;
}

CHANGE thuShutdown
{
	selected = 12;
}

CHANGE friShutdown
{
	selected = 13;
}

CHANGE satShutdown
{
	selected = 14;
}

CHANGE sunShutdown
{
	selected = 8;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
    INTEGER i;

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	selected = GetDayOfWeekNum();
	dow$ = DAY();
	enabled = schEnabled;
	forcedOnAfterHour = 0;
	startup_Hour = startupHour[selected];
	startup_Min = startupMin[selected];
	shutdown_Hour = shutdownHour[selected];
	shutdown_Min = shutdownMin[selected];

	for (i = 0 to 6)
	{
		UpdateTime(i);
	}
	for (i = 8 to 14)
	{
		UpdateTime(i);
	}
}


