/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name:Biamp Tesira Passthru Module v1.5
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_COMMAND_SIZE 150

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Passthru Module v1.4.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_,_SKIP_; 
BUFFER_INPUT Poll_Msg_In$[1024], Command_Msg_In$[1024], _SKIP_, From_Processor$[1024];

DIGITAL_OUTPUT Is_Initialized, _SKIP_; 
STRING_OUTPUT Subscribed$, Response$, _SKIP_, To_Processor$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
//STRING_PARAMETER InstanceTag[50], StateType[50];
//INTEGER_PARAMETER Index1, Index2;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER myID;

INTEGER parsingModuleBusy;
STRING parsedModuleMsg[254];
STRING responseRequestMsg[MAX_COMMAND_SIZE];
STRING responseMsg[MAX_COMMAND_SIZE];           
STRING pollMsg[MAX_COMMAND_SIZE];
STRING commandMsg[MAX_COMMAND_SIZE];
INTEGER pollModuleBusy;
INTEGER cmdModuleBusy;


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
////////////////////////////////////////////////////////////
// Module Communication Method Helpers
////////////////////////////////////////////////////////////
String_Function getBoundString(STRING source, STRING startString, STRING endString)
{
	INTEGER startIndex;
	INTEGER endIndex;
	STRING response[MAX_COMMAND_SIZE];
                                     
    response = "";

	IF (LEN(source) > 0)
	{
		startIndex = FIND(startString, source);
		endIndex = FIND(endString, source, startIndex + 1);
	
		IF (startIndex > 0 && startIndex < endIndex)
		{
			startIndex = startIndex + LEN(startString);
				
			response = MID(source, startIndex, endIndex - startIndex);
		}
	}

	RETURN (response);
}

                
Function sendPollMsg(STRING outgoingMsg)
{
	//STRING outgoingMsg[100];
                            
	IF (Is_Initialized = TRUE)
	{
		MakeString(To_Processor$,"POLL_MSG<%d|%s>", myID, outgoingMsg);
	}
}

Function sendCommandMsg(STRING outgoingMsg)
{
	//STRING outgoingMsg[100];
                            
	IF (Is_Initialized = TRUE)
	{
		MakeString(To_Processor$,"COMMAND_MSG<%d|%s>", myID, outgoingMsg);
	}
}

////////////////////////////////////////////////////////////
// String Method Helpers
////////////////////////////////////////////////////////////
Integer_Function contains(STRING MATCH_STRING, STRING SOURCE_STRING)
{
	RETURN (FIND(MATCH_STRING, SOURCE_STRING) > 0); 
}

String_Function addIdTag(STRING value)
{
	integer openBracket, closeBracket;
	string left$[MAX_COMMAND_SIZE], right$[MAX_COMMAND_SIZE];
	openBracket = find("\x22[", value);
	closeBracket = find("]\x22", value);

	left$ = left(value, (openBracket+1));
	right$ = right(value, (len(value)-openBracket-1));

	value = left$ + itoa(myID) + "*" + right$; 
	RETURN (value);
}

String_Function removeIdTag(STRING value)
{
	integer openBracket, star;
	string left$[MAX_COMMAND_SIZE], right$[MAX_COMMAND_SIZE];
	openBracket = find("\x22[", value);
	star = find("*", value);
	left$ = left(value, openBracket + 1);
	right$ = right(value, (len(value) - star));
	value = left$ + right$; 
	RETURN (value);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
// Function for processing message received from Processor via CHANGE From_Processor$
FUNCTION ProcessPollMsg()
{
	pollMsg = left(pollMsg, len(pollMsg)-1);
	if (find("\x0D", pollMsg) = len(pollMsg))
	{
		pollMsg = left(pollMsg, len(pollMsg)-1);
	}
	if (find("subscribe", pollMsg))
	{
		addIdTag(pollMsg);
	}
	if (find("SESSION set verbose true", pollMsg))
	{
		print("SESSION set verbose true not allowed\n");
	}
	else
	{
		sendPollMsg(pollMsg);
	}
}

#if_series3
THREADSAFE CHANGE Poll_Msg_In$
{
 	IF (Is_Initialized)
 	{
	 	WHILE (TRUE)
 		{
 			try
 			{
 				pollMsg = gather("\x0A", Poll_Msg_In$);
 				
 				ProcessPollMsg();
 			}
 			catch
      	    {
        	    print("Issue with Processor message handeling\n");
	        }
	    }
    }
}
#else
CHANGE Poll_Msg_In$
{
 	IF (Is_Initialized && pollModuleBusy = FALSE)
 	{
	 	pollModuleBusy = TRUE;
	 	
	 	WHILE (TRUE)
 		{
 			pollMsg = gather("\x0A", Poll_Msg_In$);
 			ProcessPollMsg();
		}
		pollModuleBusy = FALSE;
	}
}
#endif

// Function for processing message received from Processor via CHANGE From_Processor$
FUNCTION ProcessCommandMsg()
{
	commandMsg = left(commandMsg, len(commandMsg)-1);
	if (find("\x0D", commandMsg) = len(commandMsg))
	{
		commandMsg = left(commandMsg, len(commandMsg)-1);
	}
	if (find("SESSION set verbose true", commandMsg))
	{
		print("SESSION set verbose true not allowed\n");
	}
	else
	{
		sendCommandMsg(commandMsg);
	}
}

#if_series3
THREADSAFE CHANGE Command_Msg_In$
{
	IF (Is_Initialized)
	{
		WHILE (TRUE)
		{
			try
			{
				commandMsg = gather("\x0A", Command_Msg_In$);
				ProcessCommandMsg();
			}
 			catch
      	    {
        	    print("Issue with Processor message handeling\n");
	        }
	    }
	}
}
#else
CHANGE Command_Msg_In$
{
 	
 	IF (Is_Initialized && cmdModuleBusy = FALSE)
 	{
	 	cmdModuleBusy = TRUE;
	 	
	 	WHILE (TRUE)
 		{
 			commandMsg = gather("\x0A", Command_Msg_In$);
 			ProcessCommandMsg();
 		}
	 	cmdModuleBusy = FALSE;
	}
}
#endif

// Function for processing message received from Processor via CHANGE From_Processor$
FUNCTION ProcessProcessorMsg()
{
	IF (LEN(parsedModuleMsg) > 0)
	{
		IF (contains("REGISTER", parsedModuleMsg))
		{
			myID = ATOI(getBoundString(parsedModuleMsg,"<",">"));
			
			IF (myID > 0)
				MakeString(To_Processor$,"REGISTER<%d>", myID);
		}
		ELSE IF (contains("INIT", parsedModuleMsg))
		{
            Is_Initialized = TRUE;
			MakeString(To_Processor$,"INIT_DONE<%d>", myID);
		}
		ELSE IF (contains("RESPONSE_MSG", parsedModuleMsg))
		{
			responseRequestMsg = getBoundString(parsedModuleMsg,"<","|");
			
			responseMsg = getBoundString(parsedModuleMsg,"|",">");

			MakeString(To_Processor$,"RESPONSE_OK<%d|%s>", myID, responseRequestMsg);
			if (contains("subscribe", responseRequestMsg))
				removeIdTag(responseRequestMsg);
			Response$ = responseRequestMsg + "\n" + responseMsg + "\n";
		}
		ELSE IF (contains("SUBSCRIBED_MSG", parsedModuleMsg))
		{
			responseMsg = getBoundString(parsedModuleMsg,"<",">");
					
			removeIdTag(responseMsg);

           	Subscribed$ = responseMsg + "\n";
		}
	}
}

#if_series3
THREADSAFE CHANGE From_Processor$
{
	WHILE (TRUE)
	{
		try
		{
			parsedModuleMsg = GATHER(">", From_Processor$);

			IF (contains(parsedModuleMsg, From_Processor$))
				clearBuffer(From_Processor$);
			
			ProcessProcessorMsg();
		}
        catch
        {
            print("Issue with Processor message handeling\n");
        }
	}
}
#else
CHANGE From_Processor$
{
	IF (parsingModuleBusy = FALSE)
	{
		parsingModuleBusy = TRUE;
                       
		WHILE (TRUE)
		{           
			parsedModuleMsg = GATHER(">", From_Processor$);

			IF (contains(parsedModuleMsg, From_Processor$))
				clearBuffer(From_Processor$);

			ProcessProcessorMsg();
		}

		parsingModuleBusy = FALSE;
	}
}
#endif

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	parsingModuleBusy = FALSE;
	pollModuleBusy = FALSE;
	cmdModuleBusy = FALSE;

	Is_Initialized = FALSE;

    //WaitForInitializationComplete();
}
